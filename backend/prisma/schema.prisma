// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id @default(uuid())
  model     String
  action    String
  data      String
  before    Json?
  after     Json?
  durationMs Int?        // <--- tambahin ini
  userId    String
  createdAt DateTime @default(now())
}


model AccountEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AuthProvider {
  credentials
  google
  // Add others as needed
}

enum UserRole {
  super
  admin
  pic
  user
}

model TrustedDevice {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId   String // Hashed device fingerprint
  deviceName String? // User-defined name
  deviceType String? // "mobile", "desktop", etc.
  os         String?
  browser    String?
  ipAddress  String?
  isRevoked  Boolean  @default(false)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt

  @@unique([userId, deviceId])
}

// Authentication Models
model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String?
  name           String?
  mfaSecret      String?
  mfaEnabled     Boolean      @default(false)
  mfaBackupCodes String[]
  avatar         String?
  googleId       String?      @unique
  provider       AuthProvider @default(credentials)
  role           UserRole
  tokenVersion   Int          @default(0)
  lastLoginAt    DateTime?
  failedAttempts Int          @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  active         Boolean      @default(true)

  trustedDevices   TrustedDevice[]
  sessions         UserSession[]
  loginAttempts    LoginAttempt[]
  salesOrders      SalesOrder[]    @relation("UserSalesOrders")
  karyawan         Karyawan?
  createdBAP       BAP[]           @relation("BAPCreatedBy") // semua BAP yang dibuat user ini
  createdInvoices  Invoice[]       @relation("InvoiceCreatedBy")
  verifiedPayments Payment[]
  rab              RAB[]
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  status    String // "SUCCESS", "FAILED", "MFA_REQUIRED"
  ipAddress String
  userAgent String?
  deviceId  String? // Device fingerprint
  reason    String? // "WRONG_PASSWORD", "ACCOUNT_LOCKED"
  createdAt DateTime @default(now())

  @@index([email])
  @@index([ipAddress])
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  refreshToken String   @unique
  deviceId     String? // Link to TrustedDevice if recognized
  ipAddress    String
  userAgent    String
  country      String? // Geolocation data
  city         String?
  isRevoked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId])
  @@index([expiresAt])
}

model Counter {
  name       String   @id
  lastNumber Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Karyawan {
  id            String    @id @default(cuid())
  nik           String    @unique // Nomor Induk Karyawan
  namaLengkap   String
  tanggalLahir  DateTime?
  alamat        String?
  nomorTelepon  String?
  email         String?   @unique
  jabatan       String?
  departemen    String?
  tanggalMasuk  DateTime?
  tanggalKeluar DateTime? // jika resign atau kontrak selesai
  statusKerja   String // "aktif", "non-aktif", "cuti", dll
  foto          String?
  // Data kontrak / HR
  tipeKontrak   String? // "kontrak", "tetap", "magang"
  gajiPokok     Float?
  tunjangan     Float?
  potongan      Float?
  isActive      Boolean   @default(true)

  // Relasi ke User untuk login ERP
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  // Relasi ke Team
  teamKaryawan TeamKaryawan[]

  // Relasi ke penggajian
  gaji             Gaji[]
  spkDetail        SPKDetail[]
  spk              SPK[]             @relation("SPKCreatedBy")
  spkFieldReport   SPKFieldReport[]
  approvedBAP      BAP[]             @relation("BAPApprovedBy") // semua BAP yang di-approve user ini
  approvedInvoices Invoice[]         @relation("InvoiceApprovedBy")
  purchaseOrder    PurchaseOrder[]
  purchaseRequest  PurchaseRequest[]
  uangMuka         UangMuka[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gaji {
  id         String   @id @default(cuid())
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])
  karyawanId String
  periode    DateTime // misal: awal bulan
  gajiPokok  Float
  tunjangan  Float?
  potongan   Float?
  total      Float // otomatis hitung: gajiPokok + tunjangan - potongan
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Customer {
  id            String  @id @default(uuid())
  code          String  @unique // kode unik customer, misal: CUST-001
  name          String // nama customer
  email         String? @unique // kontak email utama
  phone         String? // nomor telepon utama
  address       String? // alamat lengkap
  branch        String? // cabang jika ada
  city          String? // kota
  province      String? // provinsi
  postalCode    String? // kode pos
  taxNumber     String? // NPWP / Tax ID
  companyType   String? // tipe perusahaan: PT, CV, dll
  contactPerson String? // nama PIC utama
  picPhone      String? // kontak PIC
  picEmail      String? // email PIC
  notes         String? // catatan tambahan

  isActive  Boolean  @default(true) // aktif/nonaktif
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects    Project[]
  salesOrders SalesOrder[]
  quotations  Quotation[]
}

model Project {
  id         String   @id @default(uuid())
  customerId String
  name       String
  location   String?
  createdAt  DateTime @default(now())

  customer        Customer          @relation(fields: [customerId], references: [id])
  salesOrders     SalesOrder[]
  rab             RAB[]
  // --- Relasi Tambahan Sesuai Pembahasan Kita ---
  spks            SPK[] // <-- Proyek ini memiliki banyak SPK
  budgets         ProjectBudget[] // <-- Anggaran untuk proyek ini
  expenses        ProjectExpense[] // <-- Semua biaya tercatat di proyek ini
  purchaseOrder   PurchaseOrder[]
  purchaseRequest PurchaseRequest[]
}

model Product {
  id          String      @id @default(uuid())
  code        String      @unique // Kode produk/SKU
  name        String // Nama produk
  description String? // Deskripsi produk
  type        ProductType // Material, Jasa, Alat, dll

  purchaseUnit String // Satuan pembelian (misal: roll)
  storageUnit  String // Satuan penyimpanan (misal: roll)
  usageUnit    String // Satuan penggunaan (misal: meter)

  conversionToStorage Decimal // Dari pembelian → penyimpanan (contoh: 1 karton = 10 roll → 10)
  conversionToUsage   Decimal // Dari penyimpanan → penggunaan (contoh: 1 roll = 100 meter → 100)

  isConsumable Boolean @default(true) // True jika habis pakai
  isActive     Boolean @default(true)
  image        String? // URL gambar produk
  barcode      String? // Optional barcode / QR

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional kategori
  categoryId String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])

  // =============================================================
  // RELASI KE COA DITAMBAHKAN DI SINI
  // =============================================================

  // Akun untuk mencatat PENDAPATAN saat produk ini dijual
  revenueAccountId String?
  revenueAccount   ChartOfAccounts? @relation("ProductRevenue", fields: [revenueAccountId], references: [id])

  // Akun untuk mencatat HARGA POKOK (HPP) saat produk ini dijual
  cogsAccountId String? // COGS = Cost of Goods Sold
  cogsAccount   ChartOfAccounts? @relation("ProductCogs", fields: [cogsAccountId], references: [id])

  // Akun untuk mencatat nilai PERSEDIAAN (ASET) saat produk ini dibeli
  inventoryAccountId String?
  inventoryAccount   ChartOfAccounts? @relation("ProductInventory", fields: [inventoryAccountId], references: [id])

  // Relasi
  salesOrderItems           SalesOrderItem[]
  QuotationLines            QuotationLine[]
  rabDetail                 RABDetail[]
  purchaseRequestDetail     PurchaseRequestDetail[]
  rincianPertanggungJawaban RincianPertanggungjawaban[]
}

model RAB {
  id          String    @id @default(uuid())
  projectId   String
  name        String // Nama RAB atau judul dokumen
  description String? // Deskripsi tambahan
  total       Decimal   @default(0) // Total RAB, bisa dihitung dari detail
  status      RABStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relasi
  project    Project     @relation(fields: [projectId], references: [id])
  rabDetails RABDetail[]

  // Optional user pembuat
  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])
}

model RABDetail {
  id          String      @id @default(uuid())
  rabId       String
  productId   String? // Bisa null jika item custom/jasa
  description String // Nama item, misal "Upah Tukang", "Semen", dll.
  categoryRab CategoryRAB @default(STRUCTURE) // Kategori pekerjaan
  qty         Decimal
  unit        String // Contoh: hari, jam, pcs, m2, m3
  price       Decimal
  subtotal    Decimal // qty * price
  costType    CostType    @default(MATERIAL) // Jenis biaya
  notes       String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  rab     RAB      @relation(fields: [rabId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@index([rabId])
  @@index([categoryRab])
  @@index([costType])
}

enum CategoryRAB {
  PRELIMINARY // Pekerjaan Pendahuluan
  SITEPREP // Pekerjaan Persiapan
  STRUCTURE // Pekerjaan Struktur
  ARCHITECTURE // Pekerjaan Arsitektur
  MEP // Mechanical, Electrical, Plumbing
  FINISHING // Pekerjaan Finishing
  LANDSCAPE // Pekerjaan Landscaping
  EQUIPMENT // Peralatan dan Perlengkapan
  OVERHEAD // Biaya Overhead & Profit
  OTHER // Lain-lain
}

enum CostType {
  MATERIAL // Produk / bahan
  LABOR // Tukang / pekerja / jasa
  EQUIPMENT // Peralatan / sewa alat
  SUBCON // Pekerjaan oleh subkontraktor
  TRANSPORT // Transportasi / mobilisasi
  OVERHEAD // Biaya overhead kantor, site, dll
  OTHER // Biaya lain-lain, transport, dll
}

enum RABStatus {
  DRAFT
  APPROVED
  REJECTED
}

enum ProductType {
  Material // tetap
  Jasa // tetap
  Alat // tetap

  FinishedGoods // Barang Jadi
  SparePart // Suku Cadang
  Consumable // Bahan Habis Pakai
  Asset // Aset tetap
  Rental // Penyewaan
  Software // Produk digital
  Packaging // Kemasan
  MRO // Maintenance, Repair, Operation

  Scrap // Barang bekas sisa produksi / customer
  Refurbished // Barang bekas diperbaiki agar bisa dipakai
  Return // Barang retur dari customer
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

// ENUM
enum QuotationStatus {
  DRAFT
  SENT
  REVIEW
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}

enum LineType {
  PRODUCT
  SERVICE
  FREIGHT
  OTHER
}

enum DiscountType {
  PERCENT
  AMOUNT
}

// MODEL
model Quotation {
  id              String @id @default(uuid())
  quotationNumber String @unique // Nomor penawaran
  version         Int    @default(1)

  // Relasi ke customer
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  currency     String  @default("IDR")
  exchangeRate Decimal @default(1.0)

  status QuotationStatus @default(DRAFT)

  validFrom  DateTime?
  validUntil DateTime?

  paymentTermId String?
  paymentTerm   PaymentTerm? @relation(fields: [paymentTermId], references: [id])

  // Nilai perhitungan
  subtotal      Decimal      @default(0)
  discountType  DiscountType @default(PERCENT)
  discountValue Decimal      @default(0) // bisa % atau amount
  taxInclusive  Boolean      @default(false)
  taxTotal      Decimal      @default(0)
  otherCharges  Decimal      @default(0)
  total         Decimal      @default(0)

  notes        String?
  preparedBy   String? // user id
  approvedBy   String?
  approvedAt   DateTime?
  salesOrderId String?
  salesOrder   SalesOrder? @relation(fields: [salesOrderId], references: [id])

  // Relasi ke item
  lines QuotationLine[]

  // Relasi ke history/approval/attachment
  histories   QuotationHistory[]
  approvals   QuotationApproval[]
  attachments QuotationAttachment[]
  comments    QuotationComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuotationLine {
  id          String    @id @default(uuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])

  lineNo   Int
  lineType LineType @default(PRODUCT)

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  description String?
  qty         Decimal @default(1)
  uom         String?
  unitPrice   Decimal @default(0)

  lineDiscountType  DiscountType @default(PERCENT)
  lineDiscountValue Decimal      @default(0)

  lineSubtotal Decimal @default(0)
  taxId        String?
  tax          Tax?    @relation(fields: [taxId], references: [id])
  taxAmount    Decimal @default(0)
  lineTotal    Decimal @default(0)

  createdAt DateTime @default(now())
}

model QuotationHistory {
  id          String    @id @default(uuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  version     Int
  changedBy   String?
  changeAt    DateTime  @default(now())
  changeNote  String?
  payload     Json
}

model QuotationApproval {
  id          String          @id @default(uuid())
  quotationId String
  quotation   Quotation       @relation(fields: [quotationId], references: [id])
  approverId  String?
  sequence    Int             @default(1)
  status      QuotationStatus @default(REVIEW)
  notes       String?
  actedAt     DateTime?
}

model QuotationAttachment {
  id          String    @id @default(uuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  fileName    String
  filePath    String
  fileSize    Int?
  uploadedBy  String?
  uploadedAt  DateTime  @default(now())
}

model QuotationComment {
  id          String    @id @default(uuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  commentedBy String?
  comment     String
  createdAt   DateTime  @default(now())
}

model Tax {
  id          String  @id @default(uuid())
  code        String  @unique // Misal: PPN, VAT10, PPh23
  name        String // Nama pajak (misal: "PPN 11%", "PPh Pasal 23")
  description String? // Penjelasan tambahan

  rate        Decimal // Persentase (contoh: 11.00 untuk 11%)
  isInclusive Boolean @default(false) // true = harga sudah termasuk pajak, false = harga belum termasuk pajak
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi ke transaksi
  quotationItems QuotationLine[] // Pajak di Penawaran Harga
}

model PaymentTerm {
  id          String  @id @default(uuid())
  code        String  @unique // Kode unik (misal: NET30, COD)
  name        String // Nama syarat pembayaran (misal: "Net 30 Hari", "Cash On Delivery")
  description String? // Penjelasan tambahan

  dueDays  Int // Jangka waktu pembayaran (contoh: 30 → berarti jatuh tempo 30 hari setelah invoice)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi ke transaksi
  quotations Quotation[] // Bisa dipakai di Penawaran Harga
}

// ================== ENUMS ==================
enum OrderType {
  REGULAR
  SUPPORT
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  IN_PROGRESS_SPK
  FULFILLED
  BAST
  PARTIALLY_INVOICED
  INVOICED
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum ItemType {
  PRODUCT
  SERVICE
  CUSTOM
}

enum DocType {
  QUOTATION
  PO
  SPK
  BAP
  INVOICE
  PAYMENT_RECEIPT
}

// ================== MODELS ==================
model SalesOrder {
  id             String      @id @default(uuid())
  soNumber       String      @unique
  soDate         DateTime
  customerId     String
  projectId      String // <-- wajib
  userId         String
  type           OrderType
  status         OrderStatus @default(DRAFT)
  isTaxInclusive Boolean     @default(false)

  currency      String  @default("IDR")
  subtotal      Decimal @default(0) @db.Decimal(18, 2)
  discountTotal Decimal @default(0) @db.Decimal(18, 2)
  taxTotal      Decimal @default(0) @db.Decimal(18, 2)
  grandTotal    Decimal @default(0) @db.Decimal(18, 2)

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade) // <-- Restrict karena FK wajib
  user     User     @relation("UserSalesOrders", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  items     SalesOrderItem[]
  documents SalesOrderDocument[]
  invoices  Invoice[]
  spk       SPK[]
  bap       BAP[]
  quotation Quotation[]

  @@index([customerId, soDate])
  @@index([status])
  @@index([projectId])
}

model SalesOrderItem {
  id           String   @id @default(uuid())
  salesOrderId String
  lineNo       Int
  itemType     ItemType @default(PRODUCT)

  productId   String?
  name        String
  description String?
  uom         String?
  qty         Decimal @db.Decimal(18, 4)
  unitPrice   Decimal @db.Decimal(18, 2)
  discount    Decimal @default(0) @db.Decimal(18, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  lineTotal   Decimal @default(0) @db.Decimal(18, 2)

  salesOrder   SalesOrder       @relation(fields: [salesOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product?         @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade) // ← nullable
  spkDetail    SPKDetail[]
  fieldReports SPKFieldReport[] @relation("SPKDetailToFieldReport")

  @@index([salesOrderId])
  @@index([productId])
}

model SalesOrderDocument {
  id           String    @id @default(uuid())
  salesOrderId String
  docType      DocType
  docNumber    String?
  docDate      DateTime?
  fileUrl      String?
  meta         Json?
  createdAt    DateTime  @default(now())

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([salesOrderId, docType])
}

model TeamKaryawan {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])
  karyawanId String
}

model Team {
  id        String         @id @default(cuid())
  namaTeam  String
  deskripsi String?
  karyawan  TeamKaryawan[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  spk SPK[]
}

model SPK {
  id        String   @id @default(uuid())
  spkNumber String   @unique // Nomor SPK
  spkDate   DateTime @default(now())
  progress  Int?     @default(0)

  // Yang memberi perintah
  createdById String
  createdBy   Karyawan @relation("SPKCreatedBy", fields: [createdById], references: [id])

  // Relasi ke Sales Order
  salesOrderId String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Tim yang menerima perintah (optional, bisa juga langsung ke karyawan)
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  // --- Relasi Langsung ke Project Ditambahkan ---
  projectId String? // <-- Kunci utama, agar SPK tahu 'payung'-nya
  project   Project? @relation(fields: [projectId], references: [id])

  // Detail SPK
  details         SPKDetail[]
  spkFieldReport  SPKFieldReport[]
  budget          ProjectBudget[]
  expense         ProjectExpense[]
  purchaseOrder   PurchaseOrder[]
  purchaseRequest PurchaseRequest[]
  uangMuka        UangMuka[]

  spkStatus      Boolean  @default(false)
  spkStatusClose Boolean  @default(false)
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SPKDetail {
  id    String @id @default(uuid())
  spkId String
  spk   SPK    @relation(fields: [spkId], references: [id], onDelete: Cascade)

  karyawanId String?
  karyawan   Karyawan? @relation(fields: [karyawanId], references: [id])

  salesOrderItemId String?
  salesOrderItem   SalesOrderItem? @relation(fields: [salesOrderItemId], references: [id])

  lokasiUnit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportType {
  PROGRESS
  FINAL
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

model SPKFieldReport {
  id         String                @id @default(uuid())
  spkId      String
  spk        SPK                   @relation(fields: [spkId], references: [id], onDelete: Cascade)
  karyawanId String
  karyawan   Karyawan              @relation(fields: [karyawanId], references: [id])
  type       ReportType            @default(PROGRESS)
  note       String?
  reportedAt DateTime              @default(now())
  progress   Int?                  @default(0)
  status     ReportStatus          @default(PENDING)
  photos     SPKFieldReportPhoto[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  soDetailId String?
  soDetail   SalesOrderItem? @relation("SPKDetailToFieldReport", fields: [soDetailId], references: [id], onDelete: SetNull)
}

model SPKFieldReportPhoto {
  id         String         @id @default(uuid())
  reportId   String
  report     SPKFieldReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  imageUrl   String
  caption    String?
  uploadedBy String
  uploadedAt DateTime       @default(now())
  latitude   Float?
  longitude  Float?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model BAP {
  id           String   @id @default(uuid())
  bapNumber    String   @unique
  bapDate      DateTime
  salesOrderId String
  projectId    String

  // Pembuat dokumen
  createdById String
  createdBy   User   @relation("BAPCreatedBy", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Penanggung jawab / approver
  userId String
  user   Karyawan @relation("BAPApprovedBy", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Informasi pekerjaan
  workDescription String?
  location        String?

  // Status
  status     BAPStatus @default(DRAFT)
  isApproved Boolean   @default(false)
  approvedAt DateTime?

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  photos     BAPPhoto[]

  @@index([salesOrderId])
  @@index([bapNumber])
  @@index([status])
}

model BAPPhoto {
  id        String        @id @default(uuid())
  bapId     String
  photoUrl  String
  caption   String?
  category  PhotoCategory // tambahan ini
  createdAt DateTime      @default(now())
  source    String? // "SPK" atau "MANUAL"

  bap BAP @relation(fields: [bapId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([bapId])
  @@index([category])
}

enum PhotoCategory {
  BEFORE
  PROCESS
  AFTER
}

enum BAPStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

// ENUM Definitions
enum InvoiceStatus {
  DRAFT
  WAITING_APPROVAL
  APPROVED
  REJECTED
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  TRANSFER
  CASH
  CREDIT_CARD
  VA
  E_WALLET
  CHEQUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum InstallmentStatus {
  PENDING
  DUE_SOON
  OVERDUE
  PARTIALLY_PAID
  PAID
}

// ================== (Opsional tapi direkomendasikan) ==================
model BankAccount {
  id            String  @id @default(uuid())
  bankName      String
  accountNumber String  @unique
  accountHolder String
  branch        String?
  isActive      Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoice   Invoice[]
  payment   Payment[]
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  invoiceDate   DateTime
  dueDate       DateTime // Tanggal jatuh tempo
  salesOrderId  String?
  currency      String   @default("IDR")
  exchangeRate  Decimal  @default(1) @db.Decimal(18, 6) // Untuk multi-currency
  bankAccountId String?

  // Termin informasi
  paymentTerm     String? // NET_30, NET_60, dll
  installmentType String  @default("FULL") // FULL, INSTALLMENT
  totalAmount     Decimal @default(0) @db.Decimal(18, 2) // Total amount sebelum termin

  // Breakdown amounts
  subtotal      Decimal @default(0) @db.Decimal(18, 2)
  discountTotal Decimal @default(0) @db.Decimal(18, 2)
  taxTotal      Decimal @default(0) @db.Decimal(18, 2)
  grandTotal    Decimal @default(0) @db.Decimal(18, 2)
  paidTotal     Decimal @default(0) @db.Decimal(18, 2) // Total yang sudah dibayar
  balanceDue    Decimal @default(0) @db.Decimal(18, 2) // Sisa yang harus dibayar

  // Status workflow
  status         InvoiceStatus  @default(WAITING_APPROVAL)
  approvalStatus ApprovalStatus @default(PENDING)

  // Tracking informasi
  notes           String?
  internalNotes   String? // Catatan internal untuk tim finance
  termsConditions String? // Syarat dan ketentuan invoice

  // User tracking
  createdById    String
  approvedById   String?
  rejectedById   String?
  rejectedReason String?

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime?

  // Relations
  salesOrder   SalesOrder?   @relation(fields: [salesOrderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items        InvoiceItem[]
  payments     Payment[]
  installments Installment[] // Termin pembayaran
  createdBy    User          @relation("InvoiceCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  approvedBy   Karyawan?     @relation("InvoiceApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  invoiceTax   InvoiceTax[]
  bankAccount  BankAccount?  @relation(fields: [bankAccountId], references: [id])

  @@index([salesOrderId])
  @@index([createdById])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceDate])
}

model InvoiceItem {
  id        String  @id @default(uuid())
  invoiceId String
  soItemId  String?

  // Item details
  itemCode    String? // Kode item dari master data
  name        String
  description String?
  uom         String?

  // Quantity dan harga
  qty             Decimal @db.Decimal(18, 4)
  unitPrice       Decimal @db.Decimal(18, 2)
  discount        Decimal @default(0) @db.Decimal(18, 2)
  discountPercent Decimal @default(0) @db.Decimal(5, 2)

  // Tax information
  taxRate Decimal @default(0) @db.Decimal(5, 2)
  taxCode String? // PPN, PPH23, dll
  taxable Boolean @default(true)

  // Calculated fields
  lineTotal Decimal @default(0) @db.Decimal(18, 2)
  taxAmount Decimal @default(0) @db.Decimal(18, 2)
  netAmount Decimal @default(0) @db.Decimal(18, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([invoiceId])
  @@index([itemCode])
}

model Payment {
  id            String  @id @default(uuid())
  invoiceId     String
  installmentId String? // Link ke installment jika bayar termin

  // Payment details
  payDate      DateTime
  amount       Decimal  @db.Decimal(18, 2)
  currency     String   @default("IDR")
  exchangeRate Decimal  @default(1) @db.Decimal(18, 6)

  // Payment method
  method        PaymentMethod // TRANSFER, CASH, CREDIT_CARD, VA, E_WALLET
  bankAccountId String? // Rekening tujuan
  reference     String? // No. bukti, VA number, settlement id

  // Status
  status       PaymentStatus @default(PENDING) // PENDING, COMPLETED, FAILED, CANCELLED
  verified     Boolean       @default(false)
  verifiedById String?
  verifiedAt   DateTime?

  // Additional info
  notes      String?
  attachment String? // URL bukti pembayaran

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoice     Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  installment Installment? @relation(fields: [installmentId], references: [id], onDelete: SetNull)
  verifiedBy  User?        @relation(fields: [verifiedById], references: [id], onDelete: SetNull)
  bankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])

  @@index([invoiceId, payDate])
  @@index([status])
  @@index([reference])
}

model Installment {
  id                String @id @default(uuid())
  invoiceId         String
  installmentNumber Int // 1, 2, 3, ...
  name              String // DP, After Installation, Final, dll

  // Amount details
  amount     Decimal  @db.Decimal(18, 2)
  percentage Decimal? @db.Decimal(5, 2) // Persentase dari total

  // Due date dan status
  dueDate DateTime
  status  InstallmentStatus @default(PENDING) // PENDING, DUE_SOON, OVERDUE, PARTIALLY_PAID, PAID

  // Tracking pembayaran
  paidAmount Decimal   @default(0) @db.Decimal(18, 2)
  balance    Decimal   @default(0) @db.Decimal(18, 2)
  paidAt     DateTime?

  // Description
  description String?
  conditions  String? // Kondisi yang harus dipenuhi sebelum bayar

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoice  Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payments Payment[]

  @@index([invoiceId])
  @@index([dueDate])
  @@index([status])
}

// Tabel terpisah untuk tax summary jika diperlukan reporting detail
model InvoiceTax {
  id            String  @id @default(uuid())
  invoiceId     String
  taxCode       String // PPN, PPH23, dll
  taxRate       Decimal @db.Decimal(5, 2)
  taxableAmount Decimal @db.Decimal(18, 2)
  taxAmount     Decimal @db.Decimal(18, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([invoiceId])
  @@index([taxCode])
}

///   AKUNTANSI MODEL ////

enum ExpenseStatus {
  DRAFT // Baru dibuat oleh tim, belum final
  PENDING_APPROVAL // Sudah diajukan dan menunggu persetujuan manajer
  APPROVED // Disetujui, siap untuk diproses pembayaran oleh tim keuangan
  REJECTED // Ditolak, perlu ada revisi atau dibatalkan
  PAID // Sudah dibayarkan/diganti oleh tim keuangan
  CANCELLED // Dibatalkan oleh pengaju sebelum diproses
}

enum BudgetStatus {
  DRAFT // Masih dalam tahap perencanaan, belum diajukan
  PROPOSED // Diajukan untuk persetujuan
  APPROVED // Disetujui, dana siap dialokasikan
  ACTIVE // Anggaran aktif dan dana sudah bisa digunakan untuk pengeluaran
  CLOSED // Anggaran sudah selesai digunakan atau ditutup secara manual
  CANCELLED // Dibatalkan
}

enum PurchaseRequestStatus {
  DRAFT
  REVISION_NEEDED
  SUBMITTED
  APPROVED
  REJECTED
  COMPLETED
}

// Model Inti 1: Purchase Request (Header)
model PurchaseRequest {
  id         String                @id @default(uuid())
  nomorPr    String                @unique
  tanggalPr  DateTime              @default(now())
  keterangan String?
  status     PurchaseRequestStatus @default(DRAFT)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relasi ke Karyawan yang mengajukan
  karyawanId String
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])

  // Relasi ke SPK tujuan
  spkId String
  spk   SPK    @relation(fields: [spkId], references: [id])

  // Relasi ke detail permintaan
  details  PurchaseRequestDetail[]
  uangMuka UangMuka[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model Inti 2: Purchase Request Detail (Line Items)
model PurchaseRequestDetail {
  id String @id @default(uuid())

  // Relasi ke header PR
  purchaseRequestId String
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)

  // Relasi ke produk yang diminta
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Relasi ke budget yang akan dipakai
  projectBudgetId String?
  projectBudget   ProjectBudget? @relation(fields: [projectBudgetId], references: [id])

  jumlah                    Decimal                     @db.Decimal(10, 2)
  satuan                    String
  estimasiHargaSatuan       Decimal                     @db.Decimal(19, 2)
  estimasiTotalHarga        Decimal                     @db.Decimal(19, 2)
  catatanItem               String?
  rincianPertanggungjawaban RincianPertanggungjawaban[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// File: schema.prisma

// ENUM untuk status Uang Muka
enum UangMukaStatus {
  PENDING // Pengajuan baru, menunggu pencairan
  DISBURSED // Dana sudah dicairkan/diberikan
  SETTLED // Sudah dipertanggungjawabkan
  REJECTED // Pengajuan ditolak
}

enum MetodePembayaran {
  CASH
  BANK_TRANSFER
  E_WALLET
}

// 1. MODEL POKOK: UANG MUKA / CASH ADVANCE
model UangMuka {
  id                String         @id @default(uuid())
  nomor             String         @unique
  tanggalPengajuan  DateTime       @default(now())
  tanggalPencairan  DateTime?
  jumlah            Decimal        @db.Decimal(19, 2)
  keterangan        String?
  status            UangMukaStatus @default(PENDING)
  buktiPencairanUrl String?

  // -- FIELD TAMBAHAN YANG DIUSULKAN --
  metodePencairan     MetodePembayaran? // Nullable, karena baru diisi saat pencairan
  namaBankTujuan      String? // e.g., "BCA"
  nomorRekeningTujuan String? // e.g., "8812345678"
  namaEwalletTujuan   String? // e.g., "GoPay" atau "OVO"

  // Relasi ke PR sebagai justifikasi
  purchaseRequestId String?
  purchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])

  // Relasi ke Karyawan yang menerima dana
  karyawanId String
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])

  // Relasi ke SPK untuk tracking per proyek
  spkId String
  spk   SPK    @relation(fields: [spkId], references: [id])

  // Relasi ke dokumen pertanggungjawaban yang menutup uang muka ini
  pertanggungjawaban Pertanggungjawaban[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum untuk mendefinisikan status setiap item rincian
enum StatusRincianPj {
  PENDING // Menunggu verifikasi
  APPROVED // Disetujui
  REJECTED // Ditolak
  REVISION // Perlu direvisi
}

// Enum untuk jenis pembayaran (opsional tapi sangat berguna)
enum JenisPembayaran {
  CASH
  TRANSFER
  DEBIT
  CREDIT_CARD
  QRIS
}

// Dokumen untuk melaporkan penggunaan Uang Muka
model Pertanggungjawaban {
  id                   String          @id @default(uuid())
  nomor                String          @unique // e.g., "PJ-2025-001"
  tanggal              DateTime        @default(now())
  totalBiaya           Decimal         @db.Decimal(19, 2)
  sisaUangDikembalikan Decimal         @db.Decimal(19, 2)
  keterangan           String?
  status               StatusRincianPj @default(PENDING)

  // Relasi one-to-one ke Uang Muka yang ditutup
  uangMukaId String
  uangMuka   UangMuka @relation(fields: [uangMukaId], references: [id])

  // Relasi ke detail-detail biayanya
  details RincianPertanggungjawaban[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 3. MODEL RINCIAN PERTANGGUNGJAWABAN (SETTLEMENT DETAIL)
// Setiap baris/nota/kuitansi dari pengeluaran
model RincianPertanggungjawaban {
  id String @id @default(uuid())

  // Relasi ke dokumen header pertanggungjawaban
  pertanggungjawabanId String
  pertanggungjawaban   Pertanggungjawaban @relation(fields: [pertanggungjawabanId], references: [id], onDelete: Cascade)

  tanggalTransaksi DateTime
  keterangan       String // e.g., "Pembelian ATK di Toko ABC"
  jumlah           Decimal         @db.Decimal(19, 2)
  nomorBukti       String? // Nomor nota/kuitansi
  jenisPembayaran  JenisPembayaran @default(CASH)

  // Opsional tapi sangat direkomendasikan:
  // Relasi ke item PR asli untuk audit trail
  purchaseRequestDetailId String?
  purchaseRequestDetail   PurchaseRequestDetail? @relation(fields: [purchaseRequestDetailId], references: [id], onDelete: SetNull)

  // Relasi ke produk/jasa untuk kategorisasi biaya
  productId String
  product   Product @relation(fields: [productId], references: [id])

  fotoBukti FotoBuktiPertanggungjawaban[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FotoBuktiPertanggungjawaban {
  id String @id @default(uuid())

  // Relasi ke rincian pertanggungjawaban
  rincianPjId String
  rincianPj   RincianPertanggungjawaban @relation(fields: [rincianPjId], references: [id], onDelete: Cascade)

  url        String // URL atau path ke file gambar
  keterangan String? // Keterangan opsional untuk setiap foto

  createdAt DateTime @default(now())
}

// 1. MODEL UNTUK ANGGARAN / DANA PROYEK
model ProjectBudget {
  id          String       @id @default(uuid())
  description String // Contoh: "Dana Talangan Tahap 1", "Anggaran Material"
  amount      Decimal      @db.Decimal(18, 2) // Jumlah dana yang disetujui
  issueDate   DateTime // Tanggal dana diberikan/dialokasikan
  status      BudgetStatus @default(DRAFT)
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  spkId     String?
  spk       SPK?                    @relation(fields: [spkId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  prDetails PurchaseRequestDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

// 2. MODEL PROJECT EXPENSE (DIPERBARUI)
model ProjectExpense {
  id          String        @id @default(uuid())
  expenseDate DateTime
  description String
  amount      Decimal       @db.Decimal(18, 2)
  receiptUrl  String?
  status      ExpenseStatus @default(DRAFT)

  projectId         String
  project           Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spkId             String?
  spk               SPK?    @relation(fields: [spkId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  paidFromAccountId String
  expenseAccountId  String

  journalEntryId String?       @unique
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  paidFromAccount ChartOfAccounts @relation("PaidFromCOA", fields: [paidFromAccountId], references: [id])
  expenseAccount  ChartOfAccounts @relation("ExpenseCOA", fields: [expenseAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([expenseDate])
  @@index([spkId])
}

// ENUM BARU UNTUK KONTROL AKUNTANSI
enum CoaType {
  ASET
  LIABILITAS
  EKUITAS
  PENDAPATAN
  HPP
  BEBAN
}

enum CoaNormalBalance {
  DEBIT
  CREDIT
}

enum CoaPostingType {
  HEADER // Akun induk untuk grouping, tidak bisa untuk transaksi
  POSTING // Akun detail yang bisa menerima transaksi/jurnal
}

enum CoaCashflowType {
  OPERATING // Aktivitas Operasi
  INVESTING // Aktivitas Investasi
  FINANCING // Aktivitas Pendanaan
  NONE // Tidak masuk laporan arus kas
}

enum CoaStatus {
  ACTIVE
  INACTIVE
  LOCKED // Dikunci, tidak bisa digunakan sementara (misal: saat audit)
}

// MODEL BARU UNTUK PAJAK
model TaxRate {
  id          String            @id @default(uuid())
  name        String            @unique // misal: PPN, PPh 23
  rate        Decimal // Tarif dalam persen, misal: 11 untuk 11%
  isActive    Boolean           @default(true)
  coaAccounts ChartOfAccounts[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// MODEL COA YANG DIPERBARUI DAN LENGKAP
model ChartOfAccounts {
  id              String            @id @default(uuid())
  code            String            @unique
  name            String
  description     String?
  type            CoaType
  normalBalance   CoaNormalBalance // Saldo normal akun (Debit/Kredit)
  postingType     CoaPostingType    @default(POSTING) // Tipe akun (Header/Posting)
  cashflowType    CoaCashflowType   @default(NONE) // Kategori Laporan Arus Kas
  status          CoaStatus         @default(ACTIVE)
  isReconcilable  Boolean           @default(false) // True jika akun ini perlu direkonsiliasi (misal: Bank)
  defaultCurrency String            @default("IDR")
  parentId        String?
  parent          ChartOfAccounts?  @relation("CoaHierarchy", fields: [parentId], references: [id])
  children        ChartOfAccounts[] @relation("CoaHierarchy")

  taxRateId String? // Relasi ke tarif pajak default
  taxRate   TaxRate? @relation(fields: [taxRateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsAsRevenue   Product[]          @relation("ProductRevenue")
  productsAsCogs      Product[]          @relation("ProductCogs")
  productsAsInventory Product[]          @relation("ProductInventory")
  journalLines        JournalEntryLine[]
  paidFromAccount     ProjectExpense[]   @relation("PaidFromCOA")
  expenseAccount      ProjectExpense[]   @relation("ExpenseCOA")
  paymentVoucher      PaymentVoucher[]
}

// 2. BUKU JURNAL / BUKU BESAR (MODEL BARU YANG PENTING)
model JournalEntry {
  id               String             @id @default(uuid())
  transactionDate  DateTime // Tanggal transaksi
  description      String // "Penjualan dari Invoice #INV-001", "Biaya material Proyek A"
  sourceDocument   String? // Misal: "Invoice" atau "ProjectExpense"
  sourceDocumentId String? // ID dari Invoice atau ProjectExpense tersebut
  lines            JournalEntryLine[]
  supplierInvoice  Supplier[]
  paymentVoucher   PaymentVoucher[]
  sipplierInvoice  SupplierInvoice[]

  projectExpense ProjectExpense?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([transactionDate])
  @@index([sourceDocument, sourceDocumentId])
}

// 3. DETAIL JURNAL (DEBIT & KREDIT)
model JournalEntryLine {
  id             String  @id @default(uuid())
  journalEntryId String
  coaId          String // ID Akun dari ChartOfAccounts
  debit          Decimal @default(0) @db.Decimal(18, 2)
  credit         Decimal @default(0) @db.Decimal(18, 2)
  description    String?

  account ChartOfAccounts @relation(fields: [coaId], references: [id])
  parent  JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@index([journalEntryId])
  @@index([coaId])
}

// ==========================================================
//               MODUL MANAJEMEN SUPPLIER (VENDOR)
// ==========================================================

// ENUM untuk status Supplier
enum SupplierStatus {
  ACTIVE // Supplier aktif dan bisa digunakan untuk transaksi
  INACTIVE // Supplier tidak aktif, tidak muncul di pilihan transaksi baru
  BLACKLISTED // Diblokir, tidak bisa digunakan sama sekali
}

// Model Utama Supplier
model Supplier {
  id     String         @id @default(uuid())
  code   String         @unique // Kode unik internal untuk supplier, misal: SUP-0001
  name   String // Nama resmi perusahaan supplier
  status SupplierStatus @default(ACTIVE)

  // --- Informasi Kontak & Alamat ---
  email           String? @unique
  phone           String?
  website         String?
  // Catatan: Alamat idealnya dibuat model terpisah jika butuh struktur detail (jalan, kota, dll)
  // Untuk kesederhanaan, di sini menggunakan Text
  billingAddress  String?
  shippingAddress String?

  // --- Informasi Keuangan & Pajak ---
  npwp      String? @unique // Nomor Pokok Wajib Pajak
  isTaxable Boolean @default(false) // Apakah supplier ini PKP (Pengusaha Kena Pajak)

  // Relasi ke Termin Pembayaran Default
  termOfPaymentId String?
  termOfPayment   TermOfPayment? @relation(fields: [termOfPaymentId], references: [id])

  // --- Relasi ke Model Lain ---
  // One-to-Many: Satu supplier bisa punya banyak kontak dan rekening bank
  contacts     SupplierContact[]
  bankAccounts SupplierBankAccount[]

  // Relasi ke Kategori Supplier
  supplierCategoryId String?
  supplierCategory   SupplierCategory? @relation(fields: [supplierCategoryId], references: [id])

  // --- Relasi ke Modul Transaksional (Akan dibuat nanti) ---
  // Menunjukkan integrasi ke modul lain
  projectExpenses  ProjectExpense[] // Pengeluaran Proyek yang dibayarkan ke vendor ini
  purchaseOrders   PurchaseOrder[] // Semua Purchase Order untuk supplier ini
  supplierInvoices SupplierInvoice[] // Semua tagihan dari supplier ini
  payments         PaymentVoucher[] // Semua pembayaran ke supplier ini
  journalEntry     JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([status])
}

// Model untuk menyimpan multiple kontak per supplier
model SupplierContact {
  id        String  @id @default(uuid())
  name      String
  position  String? // Jabatan, misal: "Sales Manager"
  email     String?
  phone     String?
  isPrimary Boolean @default(false) // Menandakan kontak utama

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([supplierId])
}

// Model untuk menyimpan multiple rekening bank per supplier
model SupplierBankAccount {
  id                String  @id @default(uuid())
  bankName          String // Nama Bank (BCA, Mandiri, dll)
  accountHolderName String // Nama Pemilik Rekening
  accountNumber     String // Nomor Rekening
  branch            String? // Cabang Bank
  isPrimary         Boolean @default(false)

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([supplierId])
}

// ==========================================================
//               MASTER DATA PENDUKUNG
// ==========================================================

// Master Data untuk Kategori Supplier
model SupplierCategory {
  id          String     @id @default(uuid())
  name        String     @unique // Contoh: "Supplier Material", "Subkontraktor", "Jasa"
  description String?
  suppliers   Supplier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Master Data untuk Termin Pembayaran (Term of Payment)
model TermOfPayment {
  id          String     @id @default(uuid())
  name        String     @unique // Contoh: "Cash On Delivery", "Net 30", "Net 60"
  days        Int        @default(0) // Jumlah hari jatuh tempo. 0 untuk COD.
  description String?
  suppliers   Supplier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==========================================================
//               ENUMS UNTUK MODUL PENGADAAN & UTANG
// ==========================================================

enum PurchaseOrderStatus {
  DRAFT // Masih dalam persiapan, belum diajukan
  PENDING_APPROVAL // Diajukan dan menunggu persetujuan
  APPROVED // Disetujui, siap dikirim ke supplier
  REJECTED // Ditolak
  SENT // Sudah dikirim ke supplier
  PARTIALLY_RECEIVED // Sebagian barang/jasa sudah diterima
  FULLY_RECEIVED // Semua barang/jasa sudah diterima, PO selesai
  CANCELLED // Dibatalkan
}

enum SupplierInvoiceStatus {
  DRAFT // Baru dibuat, belum divalidasi
  PENDING_APPROVAL // Menunggu persetujuan untuk dibayar
  AWAITING_PAYMENT // Disetujui dan menunggu pembayaran
  PARTIALLY_PAID // Sudah dibayar sebagian
  FULLY_PAID // Lunas
  OVERDUE // Lewat jatuh tempo
  CANCELLED // Dibatalkan
}

enum SupplierPaymentMethod {
  BANK_TRANSFER
  CASH
  CHEQUE
  VIRTUAL_ACCOUNT
}

// ==========================================================
//               1. MODUL PEMBELIAN (PURCHASE ORDER)
// ==========================================================

model PurchaseOrder {
  id                   String              @id @default(uuid())
  poNumber             String              @unique // Nomor PO internal, misal: PO/2025/10/001
  orderDate            DateTime
  expectedDeliveryDate DateTime?
  status               PurchaseOrderStatus @default(DRAFT)

  // --- Relasi ---
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id])
  spkId      String?
  spk        SPK?     @relation(fields: [spkId], references: [id])

  orderedById String // ID Karyawan/User yang membuat PO
  orderedBy   Karyawan @relation(fields: [orderedById], references: [id])

  // --- Finansial ---
  subtotal     Decimal @default(0) @db.Decimal(18, 2)
  taxAmount    Decimal @default(0) @db.Decimal(18, 2)
  shippingCost Decimal @default(0) @db.Decimal(18, 2)
  totalAmount  Decimal @default(0) @db.Decimal(18, 2)

  // --- Lain-lain ---
  notes           String? // Catatan untuk supplier
  shippingAddress String?

  // --- Relasi Balik ---
  lines            PurchaseOrderLine[]
  supplierInvoices SupplierInvoice[] // Satu PO bisa jadi memiliki beberapa tagihan

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderLine {
  id          String  @id @default(uuid())
  description String // Deskripsi barang/jasa
  quantity    Decimal @db.Decimal(18, 4)
  unitPrice   Decimal @db.Decimal(18, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2) // Tarif pajak dalam persen, misal: 11.00
  totalAmount Decimal @db.Decimal(18, 2)

  poId          String
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)

  // productId    String?  // Opsional: jika terhubung ke modul Master Barang/Produk
  // product      Product? @relation(fields: [productId], references: [id])
}

// ==========================================================
//               2. MODUL TAGIHAN SUPPLIER (ACCOUNTS PAYABLE)
// ==========================================================

model SupplierInvoice {
  id            String                @id @default(uuid())
  invoiceNumber String // Nomor tagihan DARI supplier
  invoiceDate   DateTime
  dueDate       DateTime // Tanggal jatuh tempo
  status        SupplierInvoiceStatus @default(DRAFT)

  // --- Relasi ---
  supplierId      String
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  purchaseOrderId String? // Bisa jadi tagihan tidak berasal dari PO
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  // --- Finansial ---
  subtotal    Decimal @db.Decimal(18, 2)
  taxAmount   Decimal @default(0) @db.Decimal(18, 2)
  totalAmount Decimal @db.Decimal(18, 2)
  amountPaid  Decimal @default(0) @db.Decimal(18, 2) // Jumlah yang sudah terbayar

  // --- Integrasi Akuntansi ---
  journalEntryId String?       @unique
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  // --- Relasi Balik ---
  paymentAllocations PaymentAllocation[] // Tagihan ini bisa dibayar oleh beberapa pembayaran

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([supplierId, invoiceNumber]) // Nomor invoice harus unik per supplier
}

// ==========================================================
//               3. MODUL PEMBAYARAN UTANG
// ==========================================================

model PaymentVoucher {
  id            String                @id @default(uuid())
  voucherNumber String                @unique // Nomor voucher pembayaran internal
  paymentDate   DateTime
  paymentMethod SupplierPaymentMethod
  amount        Decimal               @db.Decimal(18, 2)
  notes         String?

  // --- Relasi ---
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  // --- Integrasi Akuntansi ---
  paidFromAccountId String // Akun Kas/Bank yang digunakan untuk membayar
  paidFromAccount   ChartOfAccounts @relation(fields: [paidFromAccountId], references: [id])
  journalEntryId    String?         @unique
  journalEntry      JournalEntry?   @relation(fields: [journalEntryId], references: [id])

  // --- Relasi Balik ---
  allocations PaymentAllocation[] // Pembayaran ini bisa dialokasikan ke beberapa tagihan
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Model PENGHUBUNG (Join Table) untuk relasi Many-to-Many
// antara Pembayaran dan Tagihan
model PaymentAllocation {
  id              String  @id @default(uuid())
  amountAllocated Decimal @db.Decimal(18, 2) // Jumlah yang dialokasikan dari pembayaran ini ke tagihan ini

  paymentVoucherId String
  paymentVoucher   PaymentVoucher @relation(fields: [paymentVoucherId], references: [id])

  supplierInvoiceId String
  supplierInvoice   SupplierInvoice @relation(fields: [supplierInvoiceId], references: [id])

  createdAt DateTime @default(now())

  @@unique([paymentVoucherId, supplierInvoiceId])
}
