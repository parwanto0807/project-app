// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AuthProvider {
  credentials
  google
  // Add others as needed
}

enum UserRole {
  super
  admin
  pic
  user
}

model TrustedDevice {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId   String // Hashed device fingerprint
  deviceName String? // User-defined name
  deviceType String? // "mobile", "desktop", etc.
  os         String?
  browser    String?
  ipAddress  String?
  isRevoked  Boolean  @default(false)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt

  @@unique([userId, deviceId])
}

// Authentication Models
model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String?
  name           String?
  mfaSecret      String?
  mfaEnabled     Boolean      @default(false)
  mfaBackupCodes String[]
  avatar         String?
  googleId       String?      @unique
  provider       AuthProvider @default(credentials)
  role           UserRole
  tokenVersion   Int          @default(0)
  lastLoginAt    DateTime?
  failedAttempts Int          @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  active         Boolean      @default(true)

  trustedDevices TrustedDevice[]
  sessions       UserSession[]
  loginAttempts  LoginAttempt[]
  salesOrders    SalesOrder[]    @relation("UserSalesOrders")
  karyawan       Karyawan?
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  status    String // "SUCCESS", "FAILED", "MFA_REQUIRED"
  ipAddress String
  userAgent String?
  deviceId  String? // Device fingerprint
  reason    String? // "WRONG_PASSWORD", "ACCOUNT_LOCKED"
  createdAt DateTime @default(now())

  @@index([email])
  @@index([ipAddress])
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  refreshToken String   @unique
  deviceId     String? // Link to TrustedDevice if recognized
  ipAddress    String
  userAgent    String
  country      String? // Geolocation data
  city         String?
  isRevoked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId])
  @@index([expiresAt])
}

model Counter {
  name       String   @id
  lastNumber Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Karyawan {
  id            String    @id @default(cuid())
  nik           String    @unique // Nomor Induk Karyawan
  namaLengkap   String
  tanggalLahir  DateTime?
  alamat        String?
  nomorTelepon  String?
  email         String?   @unique
  jabatan       String?
  departemen    String?
  tanggalMasuk  DateTime?
  tanggalKeluar DateTime? // jika resign atau kontrak selesai
  statusKerja   String // "aktif", "non-aktif", "cuti", dll
  foto          String?
  // Data kontrak / HR
  tipeKontrak   String? // "kontrak", "tetap", "magang"
  gajiPokok     Float?
  tunjangan     Float?
  potongan      Float?
  isActive      Boolean   @default(true)

  // Relasi ke User untuk login ERP
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  // Relasi ke Team
  teamKaryawan TeamKaryawan[]

  // Relasi ke penggajian
  gaji           Gaji[]
  spkDetail      SPKDetail[]
  spk            SPK[]            @relation("SPKCreatedBy")
  spkFieldReport SPKFieldReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gaji {
  id         String   @id @default(cuid())
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])
  karyawanId String
  periode    DateTime // misal: awal bulan
  gajiPokok  Float
  tunjangan  Float?
  potongan   Float?
  total      Float // otomatis hitung: gajiPokok + tunjangan - potongan
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Customer {
  id            String  @id @default(uuid())
  code          String  @unique // kode unik customer, misal: CUST-001
  name          String // nama customer
  email         String? @unique // kontak email utama
  phone         String? // nomor telepon utama
  address       String? // alamat lengkap
  branch        String? // cabang jika ada
  city          String? // kota
  province      String? // provinsi
  postalCode    String? // kode pos
  taxNumber     String? // NPWP / Tax ID
  companyType   String? // tipe perusahaan: PT, CV, dll
  contactPerson String? // nama PIC utama
  picPhone      String? // kontak PIC
  picEmail      String? // email PIC
  notes         String? // catatan tambahan

  isActive  Boolean  @default(true) // aktif/nonaktif
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects    Project[]
  salesOrders SalesOrder[]
}

model Project {
  id         String   @id @default(uuid())
  customerId String
  name       String
  location   String?
  createdAt  DateTime @default(now())

  customer    Customer     @relation(fields: [customerId], references: [id])
  salesOrders SalesOrder[]
}

model Product {
  id          String      @id @default(uuid())
  code        String      @unique // Kode produk/SKU
  name        String // Nama produk
  description String? // Deskripsi produk
  type        ProductType // Material, Jasa, Alat, dll

  purchaseUnit String // Satuan pembelian (misal: roll)
  storageUnit  String // Satuan penyimpanan (misal: roll)
  usageUnit    String // Satuan penggunaan (misal: meter)

  conversionToStorage Decimal // Dari pembelian → penyimpanan (contoh: 1 karton = 10 roll → 10)
  conversionToUsage   Decimal // Dari penyimpanan → penggunaan (contoh: 1 roll = 100 meter → 100)

  isConsumable Boolean @default(true) // True jika habis pakai
  isActive     Boolean @default(true)
  image        String? // URL gambar produk
  barcode      String? // Optional barcode / QR

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional kategori
  categoryId String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])

  // Relasi
  salesOrderItems SalesOrderItem[]
}

enum ProductType {
  Material
  Jasa
  Alat
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

// ================== ENUMS ==================
enum OrderType {
  REGULAR
  SUPPORT
}

enum OrderStatus {
  DRAFT
  SENT
  CONFIRMED
  IN_PROGRESS_SPK
  FULFILLED
  PARTIALLY_INVOICED
  INVOICED
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum ItemType {
  PRODUCT
  SERVICE
  CUSTOM
}

enum DocType {
  QUOTATION
  PO
  SPK
  BAP
  INVOICE
  PAYMENT_RECEIPT
}

// ================== MODELS ==================
model SalesOrder {
  id             String      @id @default(uuid())
  soNumber       String      @unique
  soDate         DateTime
  customerId     String
  projectId      String // <-- wajib
  userId         String
  type           OrderType
  status         OrderStatus @default(DRAFT)
  isTaxInclusive Boolean     @default(false)

  currency      String  @default("IDR")
  subtotal      Decimal @default(0) @db.Decimal(18, 2)
  discountTotal Decimal @default(0) @db.Decimal(18, 2)
  taxTotal      Decimal @default(0) @db.Decimal(18, 2)
  grandTotal    Decimal @default(0) @db.Decimal(18, 2)

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade) // <-- Restrict karena FK wajib
  user     User     @relation("UserSalesOrders", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  items     SalesOrderItem[]
  documents SalesOrderDocument[]
  invoices  Invoice[]
  spk       SPK[]

  @@index([customerId, soDate])
  @@index([status])
  @@index([projectId])
}

model SalesOrderItem {
  id           String   @id @default(uuid())
  salesOrderId String
  lineNo       Int
  itemType     ItemType @default(PRODUCT)

  productId   String?
  name        String
  description String?
  uom         String?
  qty         Decimal @db.Decimal(18, 4)
  unitPrice   Decimal @db.Decimal(18, 2)
  discount    Decimal @default(0) @db.Decimal(18, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  lineTotal   Decimal @default(0) @db.Decimal(18, 2)

  salesOrder   SalesOrder       @relation(fields: [salesOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product?         @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade) // ← nullable
  spkDetail    SPKDetail[]
  fieldReports SPKFieldReport[] @relation("SPKDetailToFieldReport")

  @@index([salesOrderId])
  @@index([productId])
}

model SalesOrderDocument {
  id           String    @id @default(uuid())
  salesOrderId String
  docType      DocType
  docNumber    String?
  docDate      DateTime?
  fileUrl      String?
  meta         Json?
  createdAt    DateTime  @default(now())

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([salesOrderId, docType])
}

model TeamKaryawan {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id])
  karyawanId String
}

model Team {
  id        String         @id @default(cuid())
  namaTeam  String
  deskripsi String?
  karyawan  TeamKaryawan[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  spk SPK[]
}

model SPK {
  id        String   @id @default(uuid())
  spkNumber String   @unique // Nomor SPK
  spkDate   DateTime @default(now())

  // Yang memberi perintah
  createdById String
  createdBy   Karyawan @relation("SPKCreatedBy", fields: [createdById], references: [id])

  // Relasi ke Sales Order
  salesOrderId String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Tim yang menerima perintah (optional, bisa juga langsung ke karyawan)
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  // Detail SPK
  details        SPKDetail[]
  spkFieldReport SPKFieldReport[]

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SPKDetail {
  id    String @id @default(uuid())
  spkId String
  spk   SPK    @relation(fields: [spkId], references: [id], onDelete: Cascade)

  karyawanId String?
  karyawan   Karyawan? @relation(fields: [karyawanId], references: [id])

  salesOrderItemId String?
  salesOrderItem   SalesOrderItem? @relation(fields: [salesOrderItemId], references: [id])

  lokasiUnit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportType {
  PROGRESS
  FINAL
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

model SPKFieldReport {
  id         String                @id @default(uuid())
  spkId      String
  spk        SPK                   @relation(fields: [spkId], references: [id], onDelete: Cascade)
  karyawanId String
  karyawan   Karyawan              @relation(fields: [karyawanId], references: [id])
  type       ReportType            @default(PROGRESS)
  note       String?
  reportedAt DateTime              @default(now())
  progress   Int?                  @default(0)
  status     ReportStatus          @default(PENDING)
  photos     SPKFieldReportPhoto[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  soDetailId String?
  soDetail   SalesOrderItem? @relation("SPKDetailToFieldReport", fields: [soDetailId], references: [id], onDelete: SetNull)
}

model SPKFieldReportPhoto {
  id         String         @id @default(uuid())
  reportId   String
  report     SPKFieldReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  imageUrl   String
  caption    String?
  uploadedBy String
  uploadedAt DateTime       @default(now())
  latitude   Float?
  longitude  Float?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// ================== (Opsional tapi direkomendasikan) ==================
model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  invoiceDate   DateTime
  salesOrderId  String? // link ke SO kalau berasal dari SO
  currency      String   @default("IDR")

  subtotal      Decimal @default(0) @db.Decimal(18, 2)
  discountTotal Decimal @default(0) @db.Decimal(18, 2)
  taxTotal      Decimal @default(0) @db.Decimal(18, 2)
  grandTotal    Decimal @default(0) @db.Decimal(18, 2)

  status    String   @default("UNPAID") // atau buat enum InvoiceStatus
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salesOrder SalesOrder?   @relation(fields: [salesOrderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items      InvoiceItem[]
  payments   Payment[]

  @@index([salesOrderId])
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  // Snapshot dari SO item agar invoice “beku”
  soItemId    String? // refer ke SO item jika perlu telusur asal
  name        String
  description String?
  uom         String?
  qty         Decimal @db.Decimal(18, 4)
  unitPrice   Decimal @db.Decimal(18, 2)
  discount    Decimal @default(0) @db.Decimal(18, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  lineTotal   Decimal @default(0) @db.Decimal(18, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([invoiceId])
}

model Payment {
  id        String   @id @default(uuid())
  invoiceId String
  payDate   DateTime
  amount    Decimal  @db.Decimal(18, 2)
  method    String? // transfer, cash, VA Midtrans, dll
  reference String? // no. bukti, VA number, settlement id
  notes     String?
  createdAt DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([invoiceId, payDate])
}
